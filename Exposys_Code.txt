import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
import arff as arf

file=open("final-dataset.arff")
decoder=arf.ArffDecoder()
data=decoder.decode(file_encode_nominal=True)

vals=[val[0:-1] for val in data ['data']]
labels=[lab[-1] for val in data ['data']]

da=set(labels)
brac=600
templ=[]
tempd=[]
for i in da:
coun=0
while coun<brac:
for j in range(len(labels)):
if labels[j]==i:
templ.append(labels[j])
tempd.append(vals[j])
count+=1
if coun == brac;
break
vals=tempd
labels=templ

l=len(vals)
labels=templ

x_train,x_test,	Y_train,Y_test = train_test_split(
vals,labels,startify=labels,test_size=0.2,random_state=0)

scaler=StandardScaler()
x_train=scaler.fit_transform(X_train)
x_test=scaler.transform(X_test)
y_train=np.array(Y_train)
y_test=np.array(Y_test)

model=SVC(kernel='sigmoid',gamma='auto')
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

print((accuracy_score(y_pred,y_test))*100,"%")

model1 = KNeighborsClassifier(n_neighbors=5)
model1.fit(x_train,y_train)

y_pred=model1.predict(x_test)

print((accuracy_score(y_pred1,y_test))*100,"%")

model2=GaussianNB()
model2.fit(x_train,y_train)

y_pred=model2.predict(x_test)

print((accuracy_score(y_pred2,y_test))*100,"%")

train_x,val_x,train_y=train_test_split(x_train,y_train,startify=y_train,test_size=0.2,random_state=0)

print(x_train.shape,x_test.shape)

columns = [ 'SRC_ADD','DES_ADD','PKD_ID','FROM_NODE','TO_NODE','PKT_TYPE',
	    'PKT_SIZE','FLAGS','FID','SEQ_NUMBER','NUMBER_OF_PKT',
	    'NUMBER_OF_BYTE','NODE_NAME_FROM','NODE_NAME_TO','PKT_IN','PKT_OUT',
	    'PKT_R','PKT_DELAY_NODE','PKT_RATE','BYTE_RATE','PKT_AVG_SIZE',
	    'UTILIZATION','PKT_DELAY','PKT_SEND_TIME','PKT_RESVED_TIME',
	    'FIRST_PKT_SENT','LAST_PKT_RESEVED']

model1=SVC(kernel='sigmoid',gamma='auto')
model1.fit(train_x,train_y)
y_val_pred1=model1.predict(val_x)
y_val_pred1=pd.DataFrame(y_val_pred1)
y_test_pred1=model1.predict(x_test)
y_test_pred1=pd.DataFrame(y_test_pred1)

model1=KNeighborsClassifier(n_neighbors=5)
model2.fit(train_x,train_y)
y_val_pred2=model2.predict(val_x)
y_val_pred2=pd.DataFrame(y_val_pred2)
y_test_pred2=model2.predict(x_test)
y_test_pred2=pd.DataFrame(y_test_pred2)

model1=GaussianNB()
model3.fit(train_x,train_y)
y_val_pred3=model3.predict(val_x)
y_val_pred3=pd.DataFrame(y_val_pred3)
y_test_pred3=model3.predict(x_test)
y_test_pred3=pd.DataFrame(y_test_pred3)

val_input = pd.concat([pd.DataFrame(val_x,columns=columns),
			y_valpred1,y_valpred2,y_valpred3], axis=1)
val_input = pd.concat([pd.DataFrame(x_test,columns=columns),
			y_test_pred1,y_test_pred2,y_test_pred3], axis=1)

model=RandomForestClassifier(n_estimators=200)
model.fit(val_input,val_y)

print((model.score(test_input,y_test))*100,"%")





